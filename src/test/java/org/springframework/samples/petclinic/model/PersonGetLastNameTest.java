// ********RoostGPT********
/*
Test generated by RoostGPT for test test-again using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getLastName_858547175f
ROOST_METHOD_SIG_HASH=getLastName_4814a2dee7

================================VULNERABILITIES================================
Vulnerability: Information Exposure (CWE-200)
Issue: The method 'getLastName()' is public and might expose sensitive user information if not handled properly. If the method is invoked without appropriate access control checks, it could lead to unauthorized information disclosure.
Solution: Ensure proper access control mechanisms are in place before the method is invoked. Use Java's built-in access modifiers to limit the visibility of the method. Consider making the method 'private' or 'protected' if it's not needed outside of its containing class or package.

================================================================================
""" 
Scenario 1: Test to validate the return of the last name

Details:  
  TestName: testGetLastName
  Description: This test is meant to check if the getLastName method accurately returns the last name stored in the instance of the class.
Execution:
  Arrange: Create an instance of the class and set its last name.
  Act: Invoke the getLastName method.
  Assert: Compare the returned last name with the expected last name.
Validation: 
  The assertion aims to verify that the getLastName method accurately returns the last name of the instance. The expected result is based on the last name we set for the instance. This test is significant to ensure that the class can correctly provide the last name when requested.

Scenario 2: Test to validate the return of the last name when it's null

Details:  
  TestName: testGetLastNameWhenNull
  Description: This test is meant to check if the getLastName method returns null when the last name of the instance is not set.
Execution:
  Arrange: Create an instance of the class without setting its last name.
  Act: Invoke the getLastName method.
  Assert: Check if the returned last name is null.
Validation: 
  The assertion aims to verify that the getLastName method returns null when the last name is not set. This is expected as the default value for a non-initialized String in Java is null. This test is significant to ensure that the class handles cases where the last name is not set.

Scenario 3: Test to validate the return of the last name when it's an empty string

Details:  
  TestName: testGetLastNameWhenEmpty
  Description: This test is meant to check if the getLastName method returns an empty string when the last name of the instance is set to an empty string.
Execution:
  Arrange: Create an instance of the class and set its last name as an empty string.
  Act: Invoke the getLastName method.
  Assert: Check if the returned last name is an empty string.
Validation: 
  The assertion aims to verify that the getLastName method returns an empty string when the last name is set as such. This is expected as the last name was set to an empty string. This test is significant to ensure that the class correctly returns the last name even when it is an empty string. 

"""
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.model;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class PersonGetLastNameTest {

    private Person person;

    @Before
    public void setUp() {
        person = new Person();
    }

    @Test
    public void testGetLastName() {
        person.setLastName("Doe");
        String lastName = person.getLastName();
        assertEquals("Doe", lastName);
    }

    @Test
    public void testGetLastNameWhenNull() {
        String lastName = person.getLastName();
        assertNull(lastName);
    }

    @Test
    public void testGetLastNameWhenEmpty() {
        person.setLastName("");
        String lastName = person.getLastName();
        assertEquals("", lastName);
    }
}
