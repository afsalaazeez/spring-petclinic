// ********RoostGPT********
/*
Test generated by RoostGPT for test release-test-8 using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=getLastName_858547175f
ROOST_METHOD_SIG_HASH=getLastName_4814a2dee7

================================VULNERABILITIES================================
Vulnerability: Information Exposure Through an Error Message (CWE-209)
Issue: The method getLastName() does not handle exceptions. If an exception occurs, the detailed error message might be sent back to the user, potentially exposing sensitive information.
Solution: Wrap the method body inside a try-catch block and handle exceptions appropriately. Avoid sending detailed error messages to the user.

Vulnerability: Improper Access Control (CWE-284)
Issue: The method getLastName() is public, which means it can be accessed from anywhere. If the lastName contains sensitive information, it can be a potential security risk.
Solution: Restrict the access to the method getLastName() by making it protected or private, based on your requirement. Use getter and setter methods to control the access to the variables.

Vulnerability: Insecure Direct Object References (CWE-639)
Issue: The method getLastName() directly exposes the object reference. An attacker can exploit this to gain unauthorized access to data.
Solution: Avoid directly exposing the object references. Use an index, map, or other indirect method that does not expose direct references to internal implementation objects.

================================================================================
"""
  Scenario 1: Test to verify getLastName returns correct last name

  Details:  
    TestName: testGetLastNameReturnsCorrectValue
    Description: This test is meant to check if the method getLastName returns the correct last name value assigned to the object. 
  Execution:
    Arrange: Create an object and set its last name.
    Act: Invoke the getLastName method on this object.
    Assert: Use JUnit assertions to compare the return value against the last name value we set.
  Validation: 
    The assertion aims to verify that getLastName returns the correct last name value. 
    This test is significant as it checks the basic functionality of the getLastName method.

  Scenario 2: Test to verify getLastName returns null for uninitialized last name

  Details:  
    TestName: testGetLastNameReturnsNullForUninitializedValue
    Description: This test is meant to check if the method getLastName returns null when the last name is not set or uninitialized. 
  Execution:
    Arrange: Create an object without setting its last name.
    Act: Invoke the getLastName method on this object.
    Assert: Use JUnit assertions to assert that the return value is null.
  Validation: 
    The assertion aims to verify that getLastName returns null for an uninitialized last name.
    This test is significant as it checks the behavior of the getLastName method when the last name is not set.

  Scenario 3: Test to verify getLastName returns empty string for last name set as empty string

  Details:  
    TestName: testGetLastNameReturnsEmptyForEmptyValue
    Description: This test is meant to check if the method getLastName returns an empty string when the last name is set as an empty string. 
  Execution:
    Arrange: Create an object and set its last name as an empty string.
    Act: Invoke the getLastName method on this object.
    Assert: Use JUnit assertions to assert that the return value is an empty string.
  Validation: 
    The assertion aims to verify that getLastName returns an empty string for a last name set as an empty string.
    This test is significant as it checks the behavior of the getLastName method when the last name is set as an empty string.
"""
*/

// ********RoostGPT********
package org.springframework.samples.petclinic.model;

import org.junit.Test;
import org.junit.Assert;

public class PersonGetLastNameTest {

    @Test
    public void testGetLastNameReturnsCorrectValue() {
        Person person = new Person();
        person.setLastName("Doe");
        String lastName = person.getLastName();
        Assert.assertEquals("Doe", lastName);
    }

    @Test
    public void testGetLastNameReturnsNullForUninitializedValue() {
        Person person = new Person();
        String lastName = person.getLastName();
        Assert.assertNull(lastName);
    }

    @Test
    public void testGetLastNameReturnsEmptyForEmptyValue() {
        Person person = new Person();
        person.setLastName("");
        String lastName = person.getLastName();
        Assert.assertEquals("", lastName);
    }
}
